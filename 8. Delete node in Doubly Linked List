8. Delete node in Doubly Linked List 

...................

Given a doubly linked list and a position. The task is to delete a node from given position in a doubly linked list.

Example 1:

Input:
LinkedList = 1 <--> 3 <--> 4 
x = 3
Output: 1 3  
Explanation: After deleting the node at
position 3 (position starts from 1),
the linked list will be now as 1->3.
Example 2:

Input:
LinkedList = 1 <--> 5 <--> 2 <--> 9  
x = 1
Output: 5 2 9
Your Task:
The task is to complete the function deleteNode() which should delete the node at given position and return the head of the linkedlist.

Expected Time Complexity : O(N)
Expected Auxilliary Space : O(1)

Constraints:
2 <= size of the linked list <= 1000
1 <= x <= N

 
 
 .....................
 
 
class Solution
{
    public:
    Node* deleteNode(Node *head_ref, int x)
    {
      //Your code here
      int position=x;
     if(position==1)
     {
       Node* temp=head_ref;
       temp->next->prev=NULL;
       head_ref=temp->next;
       temp->next=NULL;
       delete temp;
     }
     else{
       Node* curr=head_ref;
       Node* prev=NULL;
       int cnt=1;
       while(cnt<position){
           prev=curr;
           curr=curr->next;
           cnt++;
       }
       curr->prev=NULL;
       prev->next=curr->next;
       curr->next=NULL;
       delete curr;
     }
     return head_ref;
   
    }
};


........................

